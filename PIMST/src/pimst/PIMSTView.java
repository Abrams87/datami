/*
 * PIMSTView.java
 */

package pimst;

import java.awt.GridLayout;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTree;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.tree.DefaultMutableTreeNode;
import pimst.utils.DBConnection;
import sun.swing.table.DefaultTableCellHeaderRenderer;

/**
 * The application's main frame.
 */
public class PIMSTView extends FrameView {

    public PIMSTView(SingleFrameApplication app) {
        super(app);

        initComponents();

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
/* 4353 */                if ("started".equals(propertyName)) {
/* fsr */                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = PIMSTApp.getApplication().getMainFrame();
            aboutBox = new PIMSTAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        PIMSTApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTable6 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        mainPanel.setName("mainPanel"); // NOI18N

        jPanel1.setName("jPanel1"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        /*
        jTable1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        */
        Object hosts [][] = getRankedHosts();
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            hosts,
            new String [] {
                "Hosts"
            }
        ));
        jTable1.setName("jTable1"); // NOI18N
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        generateProfileTree(jTree1);
        /*
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Mathieu");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("First Name");
        javax.swing.tree.DefaultMutableTreeNode treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Mathieu");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Last Name");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Da'quin");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Gender");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Male");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        */
        jTree1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTree1MouseClicked(evt);
            }
        });
        jTree1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTree1ValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jTree1);

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "Host", "Attribute"
            }
        ));
        jTable2.setName("jTable2"); // NOI18N
        jScrollPane3.setViewportView(jTable2);

        jScrollPane4.setName("jScrollPane4"); // NOI18N

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "Attribute", "Value", "Status"
            }
        ));
        //TableColumn checkBoxCol = jTable3.getColumnModel().getColumn(2);
        //checkBoxCol.setCellEditor(new CheckboxTableCellEditor());
        //checkBoxCol.setCellRenderer(new CheckboxTableCellRenderer());
        jTable3.setName("jTable3"); // NOI18N
        jScrollPane4.setViewportView(jTable3);

        jScrollPane5.setName("jScrollPane5"); // NOI18N

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "Attribute", "Value", "Status"
            }
        ));
        jTable4.setName("jTable4"); // NOI18N
        jScrollPane5.setViewportView(jTable4);

        jScrollPane6.setName("jScrollPane6"); // NOI18N

        jTable5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "Attribute", "Value", "Status"
            }
        ));
        jTable5.setName("jTable5"); // NOI18N
        jScrollPane6.setViewportView(jTable5);

        jScrollPane7.setName("jScrollPane7"); // NOI18N

        jTable6.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null,null}
            },
            new String [] {
                "Host", "Attribute","Status"
            }
        ));
        jTable6.setName("jTable6"); // NOI18N
        jScrollPane7.setViewportView(jTable6);

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(pimst.PIMSTApp.class).getContext().getResourceMap(PIMSTView.class);
        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, 0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        menuBar.setName("menuBar"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(pimst.PIMSTApp.class).getContext().getActionMap(PIMSTView.class, this);
        fileMenu.setAction(actionMap.get("quit")); // NOI18N
        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 851, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 681, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusAnimationLabel)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        final String selectedHostStr = (String) jTable1.getValueAt(jTable1.getSelectedRow(), 0);
           //   // HERE COMES the table 3 with unknowns
        drawTableWithUnknowns(selectedHostStr);
          // HERE COMES the table 4 with match
        drawTable(jTable4, selectedHostStr, "Match");
         // HERE COMES the table 5 with irrelevant
        drawTable(jTable5, selectedHostStr, "Irrelevant");

    }//GEN-LAST:event_jTable1MouseClicked

    private void jTree1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTree1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTree1MouseClicked

    private void jTree1ValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTree1ValueChanged
        JTree profileTree = (JTree)evt.getSource();
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode)
                       profileTree.getLastSelectedPathComponent();
        if (selectedNode != null) {            
            if (selectedNode.isLeaf()) {
                Object selectedNodeInfo = selectedNode.getUserObject();
                System.out.println("leaf selected " + selectedNodeInfo.toString());
                final String selectedValueInTree = selectedNodeInfo.toString();
//                Vector<Integer> dataIds = getDataIds(selectedValueInTree);
//                Iterator  dataIdsIterator = dataIds.iterator();
//                String queryStr = new String();
//                while (dataIdsIterator.hasNext()) {
//                        queryStr += dataIdsIterator.next();
//                        if(dataIdsIterator.hasNext()){
//                            queryStr += ",";
//                        }
//                }
                drawSuggestiveTable(selectedValueInTree);
//                jTable2.setModel(new javax.swing.table.DefaultTableModel(
//                        getHostAttributeToPopTableFromDataIds(queryStr),
//                        new String[]{
//                            "Host", "Attribute"
//                        }));
//
//                TableColumn comboCol = jTable6.getColumnModel().getColumn(2);
//                comboCol.setCellEditor(new DefaultCellEditor(new JComboBox()));
//                DefaultTableCellRenderer comboRenederer = new DefaultTableCellHeaderRenderer();
//                comboRenederer.setToolTipText("Please select an appropriate option");
//                comboCol.setCellRenderer(comboRenederer);
//                jTable6.setModel(new javax.swing.table.DefaultTableModel(
//                        getHostAttributeToPopTableFromValue(selectedValueInTree),
//                        new String[]{
//                            "Host", "Attribute", "Status"
//                        }));
//
//                comboCol = jTable6.getColumnModel().getColumn(2);
//                JComboBox comboBox = new JComboBox();
//                comboBox.addItem("Match");
//                comboBox.addItem("Match All");
//                comboBox.addActionListener(new ActionListener() {
//                    boolean firstOne = true;
//                    public void actionPerformed(ActionEvent e) {
//                        final String selectedHostStr = (String) jTable6.getValueAt(jTable6.getSelectedRow(), 0);
//                        if (!firstOne) {
//                            JComboBox currentComboBox = (JComboBox) e.getSource();
//                            final String currentOptionStr = (String) currentComboBox.getSelectedItem();
//                            if (currentOptionStr.equals("Match")) {
//                                System.out.println("In here: " + currentComboBox.getSelectedItem());
//                                JDialog matchDialog = new JDialog();
//                                JPanel comboBoxPanel = new JPanel(new GridLayout(0, 2));
//
//                                matchDialog.setSize(300, 150);
//                                matchDialog.setLocationRelativeTo(jTree1);
//
//                                final JComboBox matchCBox = new JComboBox();
//                                populateMatchBox(matchCBox);
//                                matchCBox.setSize(50, 50);
//                                matchCBox.setEditable(true);
//                                JButton matchButton = new JButton("OK");
//                                comboBoxPanel.add(matchCBox);
//                                comboBoxPanel.add(matchButton);
//                                matchDialog.add(comboBoxPanel);
//                                matchDialog.setVisible(true);
//
//                                matchButton.addMouseListener(new java.awt.event.MouseAdapter() {
//
//                                    @Override
//                                    public void mouseClicked(java.awt.event.MouseEvent evt) {
//                                        String dattrib = (String) jTable6.getValueAt(jTable6.getSelectedRow(), 1);
//                                        String dvalue = selectedValueInTree;
//                                        int did = getIdFromHosts(selectedHostStr, dattrib, dvalue);
//                                        createAMatch(selectedHostStr, dattrib, dvalue, getSelectedAttribute(matchCBox), did);
//                                        generateProfileTree(jTree1);
//                                        drawTableWithUnknowns(selectedHostStr);
//                                        drawTable(jTable4, selectedHostStr, currentOptionStr);
//                                    }
//                                });
//
//                            }
//                        }
//                        firstOne = !firstOne;
//                    }
//                });
//
//                comboCol.setCellEditor(new DefaultCellEditor(comboBox));
//                comboRenederer = new DefaultTableCellHeaderRenderer();
//                comboRenederer.setToolTipText("Please select an appropriate option");
//                comboCol.setCellRenderer(comboRenederer);
            }
        }



    }//GEN-LAST:event_jTree1ValueChanged

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        Object hosts[][] = getRankedHosts();
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
                hosts,
                new String[]{
                    "Hosts"
                }));
    }//GEN-LAST:event_jButton1MouseClicked

//    private Vector<Host> getHostAttribute(String dataIdsStr) {
//        Vector<Host> hostObjects = new Vector<Host>();
//        try {
//            Connection con = DBConnection.getDBConnection();
//            Statement stmt = con.createStatement();
//            ResultSet rs = stmt.executeQuery("SELECT host, attribute FROM hosts WHERE id IN ("+ dataIdsStr +")");
//            while (rs.next()) {
//                Host host = new Host(0, rs.getString(1), rs.getString(2), null, null);
//                hostObjects.add(host);
//            }
//            stmt.close();
//            con.close();
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//            Logger.getLogger(PIMSTView.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        return hostObjects;
//    }


    private void drawSuggestiveTable(final String selectedValueInTree) {
        Vector<Integer> dataIds = getDataIds(selectedValueInTree);
        Iterator dataIdsIterator = dataIds.iterator();
        String queryStr = new String();
        while (dataIdsIterator.hasNext()) {
            queryStr += dataIdsIterator.next();
            if (dataIdsIterator.hasNext()) {
                queryStr += ",";
            }
        }
        
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
                        getHostAttributeToPopTableFromDataIds(queryStr),
                        new String[]{
                            "Host", "Attribute"
                        }));

                TableColumn comboCol = jTable6.getColumnModel().getColumn(2);
                comboCol.setCellEditor(new DefaultCellEditor(new JComboBox()));
                DefaultTableCellRenderer comboRenederer = new DefaultTableCellHeaderRenderer();
                comboRenederer.setToolTipText("Please select an appropriate option");
                comboCol.setCellRenderer(comboRenederer);
                final Object hostAttribubtePair [][] = getHostAttributeToPopTableFromValue(selectedValueInTree);
                jTable6.setModel(new javax.swing.table.DefaultTableModel(
                        hostAttribubtePair,
                        new String[]{
                            "Host", "Attribute", "Status"
                        }));

                comboCol = jTable6.getColumnModel().getColumn(2);
                JComboBox comboBox = new JComboBox();
                comboBox.addItem("Match");
                comboBox.addItem("Match All");
                comboBox.addActionListener(new ActionListener() {
                    boolean firstOne = true;
                    public void actionPerformed(ActionEvent e) {
                        final String selectedHostStr = (String) jTable6.getValueAt(jTable6.getSelectedRow(), 0);
                        if (!firstOne) {
                            JComboBox currentComboBox = (JComboBox) e.getSource();
                            final String currentOptionStr = (String) currentComboBox.getSelectedItem();
                            if (currentOptionStr.equals("Match")) {
                                System.out.println("In here: " + currentComboBox.getSelectedItem());
                                final JDialog matchDialog = new JDialog();
                                JPanel comboBoxPanel = new JPanel(new GridLayout(0, 2));

                                matchDialog.setSize(300, 150);
                                matchDialog.setLocationRelativeTo(jTree1);

                                final JComboBox matchCBox = new JComboBox();
                                populateMatchBox(matchCBox);
                                matchCBox.setSize(50, 50);
                                matchCBox.setEditable(true);
                                JButton matchButton = new JButton("OK");
                                comboBoxPanel.add(matchCBox);
                                comboBoxPanel.add(matchButton);
                                matchDialog.add(comboBoxPanel);
                                matchDialog.setVisible(true);

                                matchButton.addMouseListener(new java.awt.event.MouseAdapter() {

                                    @Override
                                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                                        String dattrib = (String) jTable6.getValueAt(jTable6.getSelectedRow(), 1);
                                        String dvalue = selectedValueInTree;
                                        int did = getIdFromHosts(selectedHostStr, dattrib, dvalue);
                                        createAMatch(selectedHostStr, dattrib, dvalue, getSelectedAttribute(matchCBox), did);
                                        generateProfileTree(jTree1);
                                        drawTableWithUnknowns(selectedHostStr);
                                        drawTable(jTable4, selectedHostStr, currentOptionStr);
                                        //System.out.println("QueryStr: "+queryStr + " SelectedHost: "+ selectedValueInTree);
                                        drawSuggestiveTable(selectedValueInTree);
                                        matchDialog.setVisible(false);
                                    }
                                });

                            } else if (currentOptionStr.equals("Match All")) {
                                System.out.println("In here: " + currentComboBox.getSelectedItem());
                                final JDialog matchDialog = new JDialog();
                                JPanel comboBoxPanel = new JPanel(new GridLayout(0, 2));

                                matchDialog.setSize(300, 150);
                                matchDialog.setLocationRelativeTo(jTree1);

                                final JComboBox matchCBox = new JComboBox();
                                populateMatchBox(matchCBox);
                                matchCBox.setSize(50, 50);
                                matchCBox.setEditable(true);
                                JButton matchButton = new JButton("OK");
                                comboBoxPanel.add(matchCBox);
                                comboBoxPanel.add(matchButton);
                                matchDialog.add(comboBoxPanel);
                                matchDialog.setVisible(true);

                                matchButton.addMouseListener(new java.awt.event.MouseAdapter() {

                                    @Override
                                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                                        //String dattrib = (String) jTable6.getValueAt(jTable6.getSelectedRow(), 1);
                                        String dvalue = selectedValueInTree;
                                        System.out.println(hostAttribubtePair.length);
                                        Vector<Host> hostsVector = getHostObjectsForThisValue(dvalue);
                                        Iterator hostsVectorIterator = hostsVector.iterator();
                                        while (hostsVectorIterator.hasNext()) {
                                            Host hostTemp = (Host)hostsVectorIterator.next();
                                            createAMatch(hostTemp.getHost(), hostTemp.getAttribute(), dvalue, getSelectedAttribute(matchCBox), hostTemp.getId());
                                        }
                                        generateProfileTree(jTree1);
                                        drawTableWithUnknowns(selectedHostStr);
                                        drawTable(jTable4, selectedHostStr, currentOptionStr);
                                        drawSuggestiveTable(selectedValueInTree);
                                        matchDialog.setVisible(false);
                                    }
                                });
                            }
                        }
                        firstOne = !firstOne;
                    }
                });

                comboCol.setCellEditor(new DefaultCellEditor(comboBox));
                comboRenederer = new DefaultTableCellHeaderRenderer();
                comboRenederer.setToolTipText("Please select an appropriate option");
                comboCol.setCellRenderer(comboRenederer);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTable jTable5;
    private javax.swing.JTable jTable6;
    private javax.swing.JTree jTree1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private JDialog aboutBox;


    private void setIrrelevant(String host, String dattrib) {
        try {
            Connection con = DBConnection.getDBConnection();
            Statement stmt = con.createStatement();
            Vector<Host> hostObjectIdenticalAttribs = getHostObjectForIdenticaldataAttribs(host, dattrib);
            Iterator hostIterator = hostObjectIdenticalAttribs.iterator();
            if (dattrib.equals("All Irrelevant")) {
                updateStausForAll(host,"Irrelevant");
            } else {
                while (hostIterator.hasNext()) {
                    Host hostHolder = (Host) hostIterator.next();
                    updateStaus(host, hostHolder.getAttribute(), hostHolder.getValue(), "Irrelevant");
                }
            }
            
            stmt.close();
            con.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
            Logger.getLogger(PIMSTView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void drawTableWithUnknowns(final String selectedHostStr) {
        //final String selectedHostStr = (String) jTable1.getValueAt(jTable1.getSelectedRow(), 0);
        Object attribValueStatusTriple [][] = getAttributeValuesStatusToPopTable(selectedHostStr,"Unknown");
        jTable3.setModel(new javax.swing.table.DefaultTableModel(
                attribValueStatusTriple
                ,
                new String[]{
                    "Attribute", "Value", "Status"
                }));

        TableColumn comboCol = jTable3.getColumnModel().getColumn(2);
        JComboBox comboBox = new JComboBox();
        comboBox.addItem("Unknown");
        //comboBox.addItem("All Unknown");
        comboBox.addItem("Irrelevant");
        comboBox.addItem("All Irrelevant");
        comboBox.addItem("Match");

        comboBox.addActionListener(new ActionListener() {
            boolean firstOne = true;
            public void actionPerformed(ActionEvent e) {
                if (!firstOne) {
                    JComboBox currentComboBox = (JComboBox) e.getSource();

                    String status = getStatus(selectedHostStr,
                            (String) jTable3.getValueAt(jTable3.getSelectedRow(), 0),
                            (String) jTable3.getValueAt(jTable3.getSelectedRow(), 1));


                        System.out.println("table 3 " + currentComboBox.getSelectedItem() + " Selected Row  " + jTable3.getSelectedRow() + "  " + currentComboBox.getActionCommand() + " status " + status);
                        final String currentOptionStr = (String)currentComboBox.getSelectedItem();
                        if (currentOptionStr.equals("Match")){
                            System.out.println("In here: "+currentComboBox.getSelectedItem());

                            final JDialog matchDialog = new JDialog();
                            JPanel comboBoxPanel = new JPanel(new GridLayout(0, 2));

                            matchDialog.setSize(300, 150);
                            matchDialog.setLocationRelativeTo(jTree1);

                            final JComboBox matchCBox = new JComboBox();
                            populateMatchBox(matchCBox);
                            matchCBox.setSize(50, 50);
                            matchCBox.setEditable(true);
                            JButton matchButton = new JButton("OK");
                            comboBoxPanel.add(matchCBox);
                            comboBoxPanel.add(matchButton);
                            matchDialog.add(comboBoxPanel);
                            matchDialog.setVisible(true);

                            matchButton.addMouseListener(new java.awt.event.MouseAdapter() {

                            @Override
                                public void mouseClicked(java.awt.event.MouseEvent evt) {
                                    String dattrib = (String)jTable3.getValueAt(jTable3.getSelectedRow(),0);
                                    String dvalue  = (String)jTable3.getValueAt(jTable3.getSelectedRow(),1);
                                    //TODO: add updateStatus here
                                    int did = getIdFromHosts(selectedHostStr, dattrib, dvalue);
                                    createAMatch((String)jTable1.getValueAt(jTable1.getSelectedRow(),0), dattrib, dvalue, getSelectedAttribute(matchCBox), did);
                                    generateProfileTree(jTree1);
                                    drawTableWithUnknowns(selectedHostStr);
                                    drawTable(jTable4, selectedHostStr, currentOptionStr);
                                    matchDialog.setVisible(false);
                                }
                            });
                        }
                        else if (!(currentComboBox.getSelectedItem().equals(status)) && (currentComboBox.getSelectedItem().equals("Irrelevant") || currentComboBox.getSelectedItem().equals("All Irrelevant"))) {
                            if (currentComboBox.getSelectedItem().equals("Irrelevant")) {
                                setIrrelevant(selectedHostStr, (String) jTable3.getValueAt(jTable3.getSelectedRow(), 0));
                                drawTableWithUnknowns(selectedHostStr);
                                drawTable(jTable5, selectedHostStr, "Irrelevant");
                            } else {
                                setIrrelevant(selectedHostStr, "All Irrelevant");
                                drawTableWithUnknowns(selectedHostStr);
                                drawTable(jTable5, selectedHostStr, "Irrelevant");
                            }
                        }
                }
                firstOne = !firstOne;
            }
        });

        comboCol.setCellEditor(new DefaultCellEditor(comboBox));
        DefaultTableCellRenderer comboRenederer = new DefaultTableCellHeaderRenderer();
        comboRenederer = new DefaultTableCellHeaderRenderer();
        comboRenederer.setToolTipText("Please select an appropriate option");
        comboCol.setCellRenderer(comboRenederer);
    }

    private void drawTable(final JTable jTable, final String selectedHostStr, String filterStr ) {
        TableColumn comboCol = jTable.getColumnModel().getColumn(2);
        comboCol.setCellEditor(new DefaultCellEditor(new JComboBox()));
        DefaultTableCellRenderer comboRenederer = new DefaultTableCellHeaderRenderer();
        comboRenederer.setToolTipText("Please select an appropriate option");
        comboCol.setCellRenderer(comboRenederer);
        
        jTable.setModel(getTableModel(selectedHostStr, filterStr));
        comboCol = jTable.getColumnModel().getColumn(2);
        JComboBox comboBox = new JComboBox();

        comboBox.addItem("Unknown");
        comboBox.addItem("All Unknown");
        comboBox.addItem("Irrelevant");
        comboBox.addItem("All Irrelevant");
        comboBox.addItem("Match");

        comboBox.addActionListener(new ActionListener() {
            boolean firstOne = true;
            public void actionPerformed(ActionEvent e) {                
                if (!firstOne) {
                    JComboBox currentComboBox = (JComboBox) e.getSource();

                    String status = getStatus(selectedHostStr,
                            (String) jTable.getValueAt(jTable.getSelectedRow(), 0),
                            (String) jTable.getValueAt(jTable.getSelectedRow(), 1));

                        System.out.println(jTable.getName() + currentComboBox.getSelectedItem() + " Selected Row  " + jTable.getSelectedRow() + "  " + currentComboBox.getActionCommand() + " status " + status);
                        final String currentOptionStr = (String)currentComboBox.getSelectedItem();
                        if (currentOptionStr.equals("Match") && (!status.equalsIgnoreCase("Match"))){
                            System.out.println("In here: "+currentComboBox.getSelectedItem());

                            final JDialog matchDialog = new JDialog();
                            JPanel comboBoxPanel = new JPanel(new GridLayout(0, 2));

                            matchDialog.setSize(300, 150);
                            matchDialog.setLocationRelativeTo(jTree1);

                            final JComboBox matchCBox = new JComboBox();
                            populateMatchBox(matchCBox);
                            matchCBox.setSize(50, 50);
                            matchCBox.setEditable(true);
                            JButton matchButton = new JButton("OK");
                            comboBoxPanel.add(matchCBox);
                            comboBoxPanel.add(matchButton);
                            matchDialog.add(comboBoxPanel);
                            matchDialog.setVisible(true);

                            matchButton.addMouseListener(new java.awt.event.MouseAdapter() {

                            @Override
                                public void mouseClicked(java.awt.event.MouseEvent evt) {
                                    String dattrib = (String)jTable.getValueAt(jTable.getSelectedRow(),0);
                                    String dvalue  = (String)jTable.getValueAt(jTable.getSelectedRow(),1);
                                    //TODO: add updateStatus here
                                    int did = getIdFromHosts(selectedHostStr, dattrib, dvalue);
                                    createAMatch((String)jTable1.getValueAt(jTable1.getSelectedRow(),0), dattrib, dvalue, getSelectedAttribute(matchCBox), did);
                                    generateProfileTree(jTree1);
                                    drawTableWithUnknowns(selectedHostStr);
                                    drawTable(jTable4, selectedHostStr, "Match");
                                    drawTable(jTable5, selectedHostStr, "Irrelevant");
                                    matchDialog.setVisible(false);
                                }
                            });

                        }
//                        else if (!(currentComboBox.getSelectedItem().equals(status)) && (currentComboBox.getSelectedItem().equals("Irrelevant") || currentComboBox.getSelectedItem().equals("All Irrelevant"))) {
//                            if (currentComboBox.getSelectedItem().equals("Irrelevant")) {
//                                setIrrelevant(selectedHostStr, (String) jTable3.getValueAt(jTable3.getSelectedRow(), 0));
//                                drawTableWithUnknowns(selectedHostStr);
//                                drawTable(jTable5, selectedHostStr, "Irrelevant");
//                            } else {
//                                setIrrelevant(selectedHostStr, "All Irrelevant");
//                                drawTableWithUnknowns(selectedHostStr);
//                                drawTable(jTable5, selectedHostStr, "Irrelevant");
//                            }
//                        }
                }
                firstOne = !firstOne;
            }
        });

        comboCol.setCellEditor(new DefaultCellEditor(comboBox));
        comboRenederer = new DefaultTableCellHeaderRenderer();
        comboRenederer.setToolTipText("Please select an appropriate option");
        comboCol.setCellRenderer(comboRenederer);
    }

    private DefaultTableModel getTableModel (String selectedHostStr, String filterStr) {
        Object [][] attribValueStatusTriple  = getAttributeValuesStatusToPopTable(selectedHostStr, filterStr);
        DefaultTableModel tableModel =  new javax.swing.table.DefaultTableModel(
                attribValueStatusTriple
                ,
                new String[]{
                    "Attribute", "Value", "Status"
                });
        return tableModel;
    }

//    private DefaultTableModel getTableModel (String selectedHostStr, String filterStr) {
//        Object [][] attribValueStatusTriple  = getAttributeValuesStatusToPopTable(selectedHostStr, filterStr);
//        DefaultTableModel tableModel =  new javax.swing.table.DefaultTableModel(
//                attribValueStatusTriple
//                ,
//                new String[]{
//                    "Attribute", "Value", "Status"
//                });
//        return tableModel;
//    }


    private String getSelectedAttribute(JComboBox matchBox) {
        return (String)matchBox.getSelectedItem();
    }
    
    private void generateProfileTree (JTree jTree) {
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Mathieu");
        Vector<String> profileAttribs = getProfileAttributes();
        Vector<String> profileAttribsValues = new Vector<String>();
        Iterator profileAttribsIterator = profileAttribs.iterator();
        while (profileAttribsIterator.hasNext()) {
            String pattrib = (String)profileAttribsIterator.next();
            profileAttribsValues = getProfileAttributeValues(pattrib);
            Iterator profileAtrribValuesIterator = profileAttribsValues.iterator();
            javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode(pattrib);
            while (profileAtrribValuesIterator.hasNext()) {                
                javax.swing.tree.DefaultMutableTreeNode treeNode3 = new javax.swing.tree.DefaultMutableTreeNode(profileAtrribValuesIterator.next());
                treeNode2.add(treeNode3);
                treeNode1.add(treeNode2);
                profileAtrribValuesIterator.remove();
            }
        }
        jTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
    }

    private Object [][] getRankedHosts() {
        Object hosts [][] = null;
        try {
            Connection con = DBConnection.getDBConnection();
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT host, count( * ) rank FROM HOSTS WHERE " +
                    "status = 'Match' OR status = 'Unknown' GROUP BY host ORDER BY rank DESC");
            int size = 0;
            if (rs.next()) {
                rs.last();
                size = rs.getRow();
                rs.beforeFirst();
            }
            hosts = new Object[size][1];
            int index = 0;
            while (rs.next()) {
                hosts[index][0] = rs.getString(1);
                index++;
            }
            stmt.close();
            con.close();

        } catch (SQLException ex) {
            Logger.getLogger(PIMSTView.class.getName()).log(Level.SEVERE, null, ex);
        }
        return hosts;
    }

    private Object [][] getAttributeValuesStatusToPopTable(String host, String status){
        Object attribValueStatusTriple [][] = null;
        try {
            Connection con = DBConnection.getDBConnection();
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT attribute, value, status FROM hosts WHERE host = \""+host+"\" AND status = \""+status+"\"");
            int size = 0;
            if (rs.next()) {
                rs.last();
                size = rs.getRow();
                rs.beforeFirst();
            }
            attribValueStatusTriple = new Object[size][3];
            int index = 0;
            while (rs.next()) {
                attribValueStatusTriple[index][0] = rs.getString(1);
                attribValueStatusTriple[index][1] = rs.getString(2);
                attribValueStatusTriple[index][2] = rs.getString(3);
                index++;
            }
            stmt.close();
            con.close();

        } catch (SQLException ex) {
            Logger.getLogger(PIMSTView.class.getName()).log(Level.SEVERE, null, ex);
        }
        return attribValueStatusTriple;
    }

    private Object [][] getHostAttributeToPopTableFromDataIds(String dataIdsStr){
        Object hostAttributePair [][] = null;
        try {
            Connection con = DBConnection.getDBConnection();
            Statement stmt = con.createStatement();
            System.out.println("SELECT host, attribute, status FROM hosts WHERE id IN ("+ dataIdsStr +") AND status = 'Match'");
            ResultSet rs = stmt.executeQuery("SELECT host, attribute, status FROM hosts WHERE id IN ("+ dataIdsStr +") AND status = 'Match'");
            int size = 0;
            if (rs.next()) {
                rs.last();
                size = rs.getRow();
                rs.beforeFirst();
            }
            hostAttributePair = new Object[size][3];
            int index = 0;
            while (rs.next()) {
                hostAttributePair[index][0] = rs.getString(1);
                hostAttributePair[index][1] = rs.getString(2);
                hostAttributePair[index][2] = rs.getString(3);
                index++;
            }
            stmt.close();
            con.close();

        } catch (SQLException ex) {
            Logger.getLogger(PIMSTView.class.getName()).log(Level.SEVERE, null, ex);
        }
        return hostAttributePair;
    }

    private Object [][] getHostAttributeToPopTableFromValue(String valueStr){
        Object hostAttributePair [][] = null;
        try {
            Connection con = DBConnection.getDBConnection();
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT host, attribute FROM hosts WHERE value = \""+ valueStr +"\" AND status <> 'Match'");
            int size = 0;
            if (rs.next()) {
                rs.last();
                size = rs.getRow();
                rs.beforeFirst();
            }
            hostAttributePair = new Object[size][2];
            int index = 0;
            while (rs.next()) {
                hostAttributePair[index][0] = rs.getString(1);
                hostAttributePair[index][1] = rs.getString(2);
                index++;
            }
            stmt.close();
            con.close();

        } catch (SQLException ex) {
            Logger.getLogger(PIMSTView.class.getName()).log(Level.SEVERE, null, ex);
        }
        return hostAttributePair;
    }

    public int calculateRank(String host) {
        int rank = 0;
        return rank;
    }

    private void updateStaus(String host, String dattribute, String value, String status) {
        try {
            Connection con = DBConnection.getDBConnection();
            Statement stmt = con.createStatement();
            System.out.println("UPDATE hosts SET status = \""+status+"\" WHERE host = \""+ host +
                    "\" AND attribute =\""+ dattribute +"\" ");
            
            stmt.executeUpdate("UPDATE hosts SET status = \""+status+"\" WHERE host = \""+ host +
                    "\" AND attribute =\""+ dattribute +"\" ");
            stmt.close();
            con.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
            Logger.getLogger(PIMSTView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void updateStausForAll(String host, String status) {
        try {
            Connection con = DBConnection.getDBConnection();
            Statement stmt = con.createStatement();
            System.out.println("UPDATE hosts SET status = \""+status+"\" WHERE host = \""+ host +
                    "\" AND status =\"Unknown\"");

            stmt.executeUpdate("UPDATE hosts SET status = \""+status+"\" WHERE host = \""+ host +
                    "\" AND status =\"Unknown\"");
            stmt.close();
            con.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
            Logger.getLogger(PIMSTView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private String getStatus(String host, String attribute, String value) {
        String status = null;
        try {
            Connection con = DBConnection.getDBConnection();
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT status FROM hosts WHERE host = \"" + host + "\" AND attribute = \"" + attribute + "\" AND value = \""+value+"\"");
            while (rs.next()) {
                status = rs.getString(1);
            }
            stmt.close();
            con.close();

        } catch (SQLException ex) {
            ex.printStackTrace();
            Logger.getLogger(PIMSTView.class.getName()).log(Level.SEVERE, null, ex);
        }
        return status;
    }

    private int getIdFromHosts(String host, String attribute, String value) {
        int id = 0;
        try {
            Connection con = DBConnection.getDBConnection();
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT id FROM hosts WHERE host = \"" + host + "\" AND attribute = \"" + attribute + "\" AND value = \""+value+"\"");
            while (rs.next()) {
                id = rs.getInt(1);
            }
            stmt.close();
            con.close();

        } catch (SQLException ex) {
            ex.printStackTrace();
            Logger.getLogger(PIMSTView.class.getName()).log(Level.SEVERE, null, ex);
        }
        return id;
    }

    private Vector<Host> getHostObjectsForThisValue(String valueStr) {
        Vector<Host> hostsVector = new Vector<Host>();
        try {
            Connection con = DBConnection.getDBConnection();
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT id, host, attribute, value, status FROM hosts WHERE value = \""+valueStr+"\" AND status <> 'Match'");
            while (rs.next()) {
                hostsVector.add(new Host(rs.getInt(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5)));
            }
            stmt.close();
            con.close();

        } catch (SQLException ex) {
            ex.printStackTrace();
            Logger.getLogger(PIMSTView.class.getName()).log(Level.SEVERE, null, ex);
        }
        return hostsVector;
    }

    //get MatchId from attribmatches table
    private int getMatchId(int did) {
        int id = 0;
        try {
            Connection con = DBConnection.getDBConnection();
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT mid FROM attribmatches WHERE did = "+did);
            while (rs.next()) {
                id = rs.getInt(1);
            }
            stmt.close();
            con.close();

        } catch (SQLException ex) {
            ex.printStackTrace();
            Logger.getLogger(PIMSTView.class.getName()).log(Level.SEVERE, null, ex);
        }
        return id;
    }
    
    //get did from profiles table
    private Vector<Integer> getDataIds(String valueStr) {
        Vector<Integer> dataIds = new Vector<Integer>();
        try {
            Connection con = DBConnection.getDBConnection();
            Statement stmt = con.createStatement();
            System.out.println("SELECT did FROM attribmatches WHERE mid IN (SELECT mid FROM profile WHERE value = \""+ valueStr +"\")");
            ResultSet rs = stmt.executeQuery("SELECT did FROM attribmatches WHERE mid IN (SELECT mid FROM profile WHERE value = \""+ valueStr +"\")");
            while (rs.next()) {
                dataIds.add(new Integer(rs.getInt(1)));
            }
            stmt.close();
            con.close();

        } catch (SQLException ex) {
            ex.printStackTrace();
            Logger.getLogger(PIMSTView.class.getName()).log(Level.SEVERE, null, ex);
        }
        return dataIds;
    }

    private void createAMatch(String host, String dattrib, String dvalue, String pattrib, int did) {
        try {
            Connection con = DBConnection.getDBConnection();
            Statement stmt = con.createStatement();
            Vector<Host> hostObjectIdenticalAttribs = getHostObjectForIdenticaldataAttribs(host, dattrib);
            Iterator hostIterator = hostObjectIdenticalAttribs.iterator();
            while (hostIterator.hasNext()) {
                Host hostHolder = (Host)hostIterator.next();
                stmt.executeUpdate("INSERT INTO attribmatches (pattrib, dattrib, did) values (\"" + pattrib + "\",\"" + hostHolder.getAttribute() + "\"," + hostHolder.getId() + ")");
                stmt.executeUpdate("INSERT INTO profile values (\"" + pattrib + "\",\"" + hostHolder.getValue() + "\"," + getMatchId(did) + ")");                
            }
            updateStaus(host, dattrib, dvalue, "Match");
            stmt.close();
            con.close();           
        } catch (SQLException ex) {
            ex.printStackTrace();
            Logger.getLogger(PIMSTView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private Vector<Host> getHostObjectForIdenticaldataAttribs (String hostStr, String dattrib) {
        Vector<Host> hostObjects = new Vector<Host>();
        try {
            Connection con = DBConnection.getDBConnection();
            Statement stmt = con.createStatement();
            ResultSet rs;
            if (dattrib.equalsIgnoreCase("All Irrelevant")){
                rs = stmt.executeQuery("SELECT id, host, attribute, value, status FROM hosts WHERE status = \"Unknown\" AND host = \""+hostStr+"\"");
            }else {
                rs = stmt.executeQuery("SELECT id, host, attribute, value, status FROM hosts WHERE attribute = \""+dattrib+"\" AND host = \""+hostStr+"\"");
            }
            
            while (rs.next()) {
                System.out.println(rs.getString(1));
                Host host = new Host(rs.getInt(1),rs.getString(2),rs.getString(3),rs.getString(4),rs.getString(5));
                hostObjects.add(host);
            }
            stmt.close();
            con.close();

        } catch (SQLException ex) {
            ex.printStackTrace();
            Logger.getLogger(PIMSTView.class.getName()).log(Level.SEVERE, null, ex);
        }
        return hostObjects;
    }

    class Host {
        
        public int id;
        public String host;
        public String attribute;
        public String value;
        public String status;

        public Host (int id, String host, String attribute, String value, String status) {
            this.id = id;
            this.host = host;
            this.attribute = attribute;
            this.value = value;
            this.status = status;
        }

        public void setAttribute(String attribute) {
            this.attribute = attribute;
        }

        public void setHost(String host) {
            this.host = host;
        }

        public void setId(int id) {
            this.id = id;
        }

        public void setStatus(String status) {
            this.status = status;
        }

        public void setValue(String value) {
            this.value = value;
        }

        public String getAttribute() {
            return attribute;
        }

        public String getHost() {
            return host;
        }

        public int getId() {
            return id;
        }

        public String getStatus() {
            return status;
        }

        public String getValue() {
            return value;
        }

    }





// delete it if not being used

//    private Vector<String> getDataAttributeValues(String dattrib) {
//        Vector<String> attribvalues = new Vector<String>();
//        try {
//            Connection con = DBConnection.getDBConnection();
//            Statement stmt = con.createStatement();
//            ResultSet rs = stmt.executeQuery("SELECT value FROM profile WHERE attribute = \""+dattrib+"\"");
//            while (rs.next()) {
//                System.out.println(rs.getString(1));
//                attribvalues.add((String)rs.getString(1));
//            }
//            stmt.close();
//            con.close();
//
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//            Logger.getLogger(PIMSTView.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        return attribvalues;
//    }

    private HashMap getAllStatusForHost(String host) {
        HashMap<Integer, String> statusIdPairHMap = new HashMap<Integer, String>();

        try {
            Connection con = DBConnection.getDBConnection();
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT id, status FROM hosts WHERE host = \""+ host +"\"" );
            while (rs.next()) {
                statusIdPairHMap.put(rs.getInt(1), rs.getString(2));
            }
            stmt.close();
            con.close();

        } catch (SQLException ex) {
            ex.printStackTrace();
            Logger.getLogger(PIMSTView.class.getName()).log(Level.SEVERE, null, ex);
        }
        return statusIdPairHMap;
    }
    
    private Vector<String> getProfileAttributes() {
        Vector<String> attributes = new Vector<String>();
        try {
            Connection con = DBConnection.getDBConnection();
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT distinct pattrib FROM profile");
            while (rs.next()) {
//                System.out.println(rs.getString(1));
                attributes.add((String)rs.getString(1));
            }
            stmt.close();
            con.close();

        } catch (SQLException ex) {
            ex.printStackTrace();
            Logger.getLogger(PIMSTView.class.getName()).log(Level.SEVERE, null, ex);
        }
        return attributes;
    }

    private Vector<String> getProfileAttributeValues(String pattrib) {
        Vector<String> attribvalues = new Vector<String>();
        try {
            Connection con = DBConnection.getDBConnection();
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT DISTINCT value FROM profile WHERE pattrib = \""+pattrib+"\"");
            while (rs.next()) {
//                System.out.println(rs.getString(1));
                attribvalues.add((String)rs.getString(1));
            }
            stmt.close();
            con.close();

        } catch (SQLException ex) {
            ex.printStackTrace();
            Logger.getLogger(PIMSTView.class.getName()).log(Level.SEVERE, null, ex);
        }
        return attribvalues;
    }

    private void populateMatchBox (JComboBox matchBox) {
        Vector<String> attributes = getProfileAttributes();
        Iterator attribIterator = attributes.iterator();
        while (attribIterator.hasNext())
            matchBox.addItem(attribIterator.next());
    }


//    private void setComboBoxStatusFromDB(int rowId, JComboBox comboBox) {
//        comboBox.setSelectedItem(getStatus(rowId));
//    }
}
